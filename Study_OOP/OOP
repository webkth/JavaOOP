* 패키지(Package)
    - 서로 관련된 클래스의 묶음
    - 클래스는 클래스 파일(*.class), 패키지는 폴더. 하위 패키지는 하위 폴더
    - 클래스의 실제 이름(full name)은 패키지를 포함. (java.lang.String)
        jar : 클래스 파일을 묶어놓은 것
        rt.jar는 클래스들을 압축한 파일('JDK 설치경로\jre\lib'에 위치)
        (참고 : Java 9부터 rt.jar 파일 없음)

    - 패키지의 선언은 소스파일의 첫 번째 문장으로 단 한번 선언
    - 같은 소스 파일의 클래스들은 모두 같은 패키지에 속하게 됨
    - 패키지 선언 X -> 이름 없는(unnamed) 패키지(default package)에 속하게 됨

* 클래스 패스(classpath)
    - 클래스 파일(*.class)의 위치를 알려주는 경로(path)
    - 환경변수 classpath로 관리하며, 경로 간의 구분자는 ';'을 사용
    - classpath(환경변수)에 패키지의 루트를 등록해줘야 함

* 제어자(modifier)
    - 클래스와 클래스의 멤버(멤버 변수, 메서드)에 부가적인 의미 부여
        접근 제어자 : public, protected, (default), private (4개 중 하나만 가능)
        그 외 : static, final, abstract 등

    - 하나의 대상에 여러 제어자를 같이 사용가능 (접근 제어자는 하나만)

* 접근 제어자(Access Modifier)
    public : 접근 제한이 전혀 없음.
    protected : 같은 패키지 내에서, 그리고 다른 패키지의 자손클래스에서 접근이 가능하다.
    (default) : 같은 패키지 내에서만 접근이 가능하다.
    private : 같은 클래스 내에서만 접근이 가능하다.
        참고) 클래스는 public or default / 멤버는 4가지 다 가능

* 캡슐화와 접근 제어자
    - 접근 제어자를 사용하는 이유 : 외부로부터 데이터를 보호하기 위해
    - 외부에는 불필요한, 내부적으로만 사용되는 부분을 감추기 위해

* 다형성(Polymorphism)
    - 여러 가지 형태를 가질 수 있는 능력
    - 조상 타입 참조 변수로 자손 타입 객체를 다루는 것
        Tv t = new SmartTv();       // 조상타입 참조 변수로 자손 타입 인스턴스 참조

* 참조변수의 형변환
    - 사용할 수 있는 멤버의 갯수를 조절하는 것
    - 조상 자손 관계의 참조변수는 서로 형변환 가능
















